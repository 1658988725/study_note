20161226-20161230
本周主要工作：
1.音频部分代码优化.
2.系统录制部分代码优化，以前代码里面使用太多内存，多级缓存；每一级缓存都需要内存分配，优化中间流程；节省内存同时让代码更紧凑；
3.新贴的板子一些异常功能调试测速，bug问题查找；
目前新pcb主要存在问题：
1.wifi极度不稳定；
最先拿出来的两个板子都是wifi极度不稳定，测试过程中一个个干扰源去掉，但是各种现象表现异常；到最后没有找到问题.
新领取三个设备，分别测速，一切功能都正常。暂时没找到问题所在；

本周工作：
继续跟进新板子的代码问题.


20161219-20161224
本周主要工作：
1.协议CRC相关功能加入，和app联合bug修正；
2.解决ios上mp4压缩必须剪切一前后点时间后在做压缩的bug，bug引入的问题是录制视频的时候，音频通道和视频通道由于写入没有同步，导致时长有点不一样，ios上压缩视频的软件就没法识别视频比音频时间长的那一部分视频；修正办法按照帧率和音频采样率严格计算时间，保证每过音视频轨道时长一样，ios上就能够正常了；
3.剪切视频音频功能的加入，现在已经可以正常加入音频~底层封装已经完成，测试音频在app上能够正常播放；分享也正常，接下来需要对音视频做同步处理，这个和上一个功能一样，因为上一个功能同步了，这个只需要严格计算时间撮即可；
4.配合徐江伦做wifi ap 和sta模式切换，驱动内存bug，暂时从网络上找到一个mem leak的驱动版本比编译，还是没解决内存问题；这个需要多次测试wifi模块切换是那个地方导致内存泄露！~估计驱动和系统内核配置相关都有影响，暂时没有解决方案;
5.rtsp 流稳定功能测试，对比rtspserver和开源rtspserver live555 发流的网络负载分析，发现开源rtspserver 更趋于稳定；结合代码对不，估计是我们代码里面rtspserver 一些信号量互斥会导致一些线程cpu等待；这个可以参考live555 优化rtspserver流程；






20161212-20161216
本站主要工作：
1.配合测试，发布生产版本烧录软件；
2.研究烧录软件合成脚步，因为每次生成烧录软件都需要拆下flash，读取flash数据的方式，太过于麻烦；利用一个脚本直接从烧录好的系统上导出16M文件的方式，保证文件完整的保证数据不出错；
3.流媒体音频相关代码加入；主要还在做短视频剪切阶段音视频同步的处理部分；

工作心得：
本周生产烧录软件有几次版本测试每次测试都存在一些写的bug没有整合进去；
主要遇到的问题：
1.烧录器读取的文件烧录进去系统没法起来，这个可能是烧录器质量问题；
2.从SD卡里面读取的固件，烧录到其它板子上，发现一些默认配置已经被修改了；而且没法自动同步到其它板子的数据，比如wifi ssid；这个因为软件设计如果ssid修改过后，就不会自动保存，后面修正办法是在导出16M估计的时候，在脚步里面添加copy默认配置文件到系统指定目录，然后在导出解决这个问题；
3.固件没法通过app 在线升级bug，这个bug引入是因为固件没有考虑到协议的crc数据部分，然而以前app通信一直没加入crc校验数据，导致以前bug一直没有暴露，正好这个版本app功能更正后，按照协议文档加入了crc校验数据，导致app不能升级bug.
4.cdr_app一直因为解析错误配置文件无法启动，然后也不恩能够复位的bug.因为设计问题，我们复位按键的处理函数在cdr_app这个程序里面，然后cdr_app因为读取配置文件没法解析导致cdr_app启动不了，然后按键也没发做相关的处理；一直死循环;修正cdr_app 里面读取配置文件异常采用默认配置的办法；同时在系统守护进程里面加入判断，能够实现默认配置恢复的功能；

下周工作：
rtsp audio处理部分.



20161205-20161210
本周工作；修正测试bug，整理发布生产固件；
1.继续上周工作，修正关联视频部分逻辑功能；基本测试不会出现播放不了的bug；
2.根据新截取视频代码流程，优化已经完成的g-sensor 录像保存和按键强制录制视频功能；
3.整合资源，发布生产烧录版本软件；
4.128G sd卡exfat驱动支持，已经更新kernel里面对exfat支持，现在128G卡可以直接录制视频，但是exfat卡没法通过uboot做升级，uboot里面没法支持exfat文件格式；
5.测试发现app请求过程中一些异常处理，比如app下载视频，下载图片的时候，不按正常流程请求数据，多次重复请求数据，导致设备webserver处理过多，cpu飙升影响系统稳定性的一些功能；

下周工作：
rtsp 音频支持；
短视频aac音频实现；


20161128-20161202
本周主要工作，对固件未完成功能完善，对于固件软件功能优化；
1.系统添加cfg分区，增加对系统文件配置功能保存功能；
  该部分功能需要更新uboot相关的配置参数分区，bootargs保存在系统的0x80000的未知，属于boot分区，如果需要更新单独分区到
  系统最后位置，则需要修正bootargs内容，还有更新rootfs kernel在flash里面的布局；
  检查代码后发现，即使更新boot分区，bootargs部分还是沿用以前设置项目，没法更新，所以对于前面100台需要更新bootargs如果需要软件实现就需要升级至少三次boot才能完成；
  或者人为修改bootargs.
  对于系统修改最小和兼容性原则下，把以前kernel分区拆分成kernel+cfg分区，在flash布局上和后面的rootfs不冲突；这样最小改动即可实现cfg保存功能；

2.代码中剪切视频文件不能播放和有时候可能异常问题；
  分析代码流程，代码里面app每次发送一个截取一段视频的命令，系统都会新开一个任务对该命令进行处理；然而app有时候会突发性质同时请求太多视频截取命令，系统需要更多新开任务来处理这些任务；
  到达一定阈值后，系统内部可能资源不够，分配内存无法完成导致生成的视频异常或者直接文件损坏，还有一定可能性webserver也是支持批量请求视频和图片数据，同时会使用系统资源，导致app进程cpu和资源占用更小导致的一些异常；

  暂时修正办法：在系统内部新开一个单独处理这些命令的任务，app做请求的时候，只把请求命令加入处理队列进行异步有序处理，这样保证最多也就一个命令需要大量内存和cpu资源处理，有效限制资源峰值问题；同时也能保证其它逻辑功能模块能够正常运行；

本周工作：
1.对于上周第二部分功能代码完善.
2.音频相关功能加入；



20161121-20161126
本周主要工作真的系统稳定性做优化
1.SD卡相关
检查几张SD卡损坏的，都是大部分都可以用fsck命令修复；
1.1.修复的时候暂时只发现log相关的文件损坏，查找代码修改了log相关代码可能引起bug的线程重入问题；
1.2.在程序里面添加sd卡修复流程，如果发现多次程序重启，就用fcsk命令修复sd卡，这个只能解决一部分sd卡因为读写异常导致的page损坏bug；
1.3fat格式的分区本来就是不太稳定的分区方式，容易损坏基本在所有平台都会这样；
1.4 可能某些设备硬件相关问题导致sd卡异常.

生产测试相关
1.修正生产测试的版本校验，保证系统稳定性的同时

系统稳定性相关
1.测试代码过程中发现解析mp4过程中有内存泄露异常bug修复；
2.app升级流程，打包文件格式异常，导致无法升级bug修复；


本周主要工作：
1.测试buglist相关问题；
2.系统配置文件保留的问题.
3.系统音频相关的功能实现.


20161114-20161119
本周工作主要对咔咔记录仪所有bug修正和整过系统优化；主要工作如下：
1.新的硬件测试流程，配合袁钊那边工具重新整理代码.完善生产测试流程.
2.系统一些可能引起稳定性的功能排查，一些外设初始化代码的完善.
3.SD卡问题查找.暂时只修正一处可能引起sd卡损害的代码线程重入bug；具体原因还未知；
4.系统启动流程优化.现在系统启动时间基本在20秒以内，基本达到预期目标;主要是调整代码里面一些耗时外设启动流程
调整系统启动脚本流程，加快系统启动时间；
5.sdk补丁和入.

本周工作：
SD卡错误问题研究：
主要从两个方面：
1.应用功能代码部分review.查找一些操作sd卡异常的流程，并对其优化；
2.sd卡驱动部分，想办法入手.


20161107-20161112
本周主要工作是优化咔咔记录仪代码功能部分；
1.针对外设部分，GPIO复用功能测试和代码修正，因为有些外设GPIO IO口没有做一些功能复用，或者同一组IO
口之间有些冲突，导致运行使用过程中会出现一些功能异常的bug；
2.mp4文件夹管理部分代码重构，采用了每截取一段MP4的视频新开线程，内存部分也重新规划；这样不会因为以前只用了一指针游标来索引mp4，导致app异常访问的时候会宕机；
3.代码里面线程互斥量锁没有初始化，导致偶偶触发段错误宕机的bug;
4.创建mp4部分代码封装成.a,这样更容独立各个模块直接的功能，解决调试一些耦合性比较强的问题；
5.app功能调试的一些需要相互协调处理的小bug修正；

下周工作：
代码调试优化，同时准备一个生产相关版本.


18300081018 111111
201601024-20161029工作总结
本周主要工作修改测试返回buglist里面的bug；
1.有些音频文件播放异常，播放错误；
2.完善一些音频提示，比如usb电源拔出功能；
3.1.4版本不能下载关联视频bug，因为内存没有初始化后赋值导致；
4.printf异常引入的内存问题，导致cpu超高，录制的视频异常；
5.安卓播放视频绿屏问题，找安卓app那边沟通.软件定位为丢包导致，暂时没解决方法，需要安卓那边替换rtp over udp为rtpovertcp作为测试；
6.外设问题，8900 2.4G遥控器异常代码查找；

下周工作系统整体代码review和结构优化;


201601017-20161023工作总结
本周主要工作就是修改测试buglist里面的bug.同时对照协议需求文档，看是否所有需求功能都有实现；
测试app里面功能项，看是否和设计有偏离，同时修正一些小bug。
1.语音播放部分的功能；优化和完善；
2.app矫时部分功能修正，app端每次都需要调用更新时间命令，固件端判断时间误差超过60秒才对时间进行矫正.防止多次矫正时间 异常.
3.更新软件版本和硬件版本的同步的代码，在app更新代码可以自动更新对应应配置文件；
4.ack消息阻塞，导致拍照和g-sensor的功能会异常的bug；
5.led灯功能代码优化;
6.rtsp花屏问题查找，暂时定位的原因是丢包问题;可能需要app端和固件端都做 优化才能处理.

下周工作：
1.修正测试bug；
2.性能优化，先从开机时间入手.




外设功能部分：
1.g_sensor相关
a.g sensor 灵敏度设置为1G 1.25G 1.5G

2.按键
a.按键拍照，接电话功能稳定性测试;
b.按键强制录制视频功能实现.






201601008-20161015工作总结
1.无SD卡状态下，系统异常bug修正；
2.无SDapp消息处理流程添加；
3.咔咔提示音异常解码通道关闭异常，导致程序宕机bug修正；
4.xml读写lib异常，导致程序重启bug；系统重复重启，app连接异常重启基本都是由于这个bug导致.修正后暂时循环测试没有app异常宕机问题出现;
5.tts相关功能实现，先用公司以前代码实现tts功能，最后因为库找不到源代码导致异常；
6.修正项目工程里面代码播放语音部分，实现语音提示的功能；现在功能完成80%.有些地方音频拼接播放不流畅在暂时体验效果比较差；
7.整个工程代码检视，流程优化，修正一些代码流程过于复杂功能.



20160918-20160926工作总结
1.优化预览图片和视频文件同步删除相关功能；
2.优化SD卡的加载逻辑，加快一部分开机速度的优化；
3.添加音乐的播放接口，添加拍照时候提示音的功能；
4.拍照关联视频接口化，gsensor灵敏度的一些优化，和关联视频的功能；
5.isp调整，让视频在晚上和白天基本能够可以正常；关于isp的调整，目前除了gamma曲线相关，主要调整了sensor相关的增益；保证晚上和白天照度满足相关需求；
6.ios aac音频bug，导致iosmp4功能不能正常播放，主要是因为aac编码出来后应该是多音轨声音导致；
7.调整代码结构，优化整个工程的性能；和稳定性


2016年8月 Week 1 (20160801-20160805)
1.添加AAC音频部分的代码：
1.makefile aaclib
2.audio_aac_adp.c audio_aac_adp.h 文件在common目录下面.
3.aacenc.h aacdec.h 在include目录下面.
4.pts修改为1024..否则声音会堆积在前面.
5.音视频同步问题：写入mp4的时候，保证音视频都获取池里面最新部分！否则会有些不同步.

2.添加APP update支持.
app 升级数据通过webserver提供文件上传功能；
参考goahead里面upload的sample，提供update action回调函数.通过http上传数据到webserver.
调试中遇到的问题：
1.跟踪上传流程部分代码，发现代码已经正确上传文件到webserver，但是数据无法写入，调试过程中发现指定目录权限问题，代码里面用rename的方式把上传临时文件保存到指定目录失败不反回错误.修正指定目录权限即可.
2.上传文件大小限制;修改上传文件限制宏即可.建议最多12M.否则可能post部分动态分配内存太少导致可能失败；



本周工作：
1.rec回放部分还不稳定，有时候网络不好情况下出现严重马赛克.需要把rtsp用rtp over tcp的方式实现.
2.夜间全黑状态，会出现编码码流太大bug.
3.系统稳定性，添加看门狗异常宕机时候reboot等等.








2016年6月 Week 4 (20160627-20160701)

2016年6月 Week 2 (20160612-20160617)
**************************************************************
20160612 周日.
1.CDR和app通信协议文档.会议套路部分修订.

20160613 周一.
1.CDR&app通信协议代码部分实现，网络部分代码底层封装实现;



2016年6月 Week 1 (20160606-20160608)
**************************************************************
20160606 周一.
1.查看平台协议文档，整理


2016年5月 Week 4 (20160530-20160604)
**************************************************************
20160530 周1
1.修改live的PTS时间戳的功能，由现在的获取系统时间和固定帧率的方式修正为编码的时候获取到的PTS来确定RTP的时间增量.
  这样有效的保证最大的时间精度同步.

20160531 周2
1.昨天基础上，添加获取系统编码PTS时间接口，并且以回调的方式从参数传入.
2.live功能测试，现在720P基本延时在600ms左右;暂时无SD卡写入状态.
3.整理app和记录仪通信协议部分;


20160601 周3
1.gohead 交叉编译配置
下午放假

20160602 周4
1.gohead 配置，80端口，可以查看xml文件和jpg文件显示，可以下载mp4文件.

20160603 周5
1.gohead 移植

20160604 周6
协议文档基本完成.




2016年5月 Week 3 (20160523-20160528)
**************************************************************
20160523 周1
整理测试的bug，直播卡顿的原因：
发送rtp主要时间在 读取一帧数据 和udp发送一帧数据.
把读取一帧数据单独整理一个线程操作，UDP单独发送，数据发送还是上不去.

20160524 周2
把wifi模块更换成7601.首先编译的驱动暂时有问题，和供应商那边沟通，提供最新WIfi驱动.
已经可以正常工作


20160525 周3
使用供应商最新的7601驱动，wifi速度勉强到8M的速度.
详细测试过程中发现数据的瓶颈在回放+录制同时进行，SD卡需要同时读取和写入，性能立马下降太多.
 CPU占用率上升，导致UDP报文数据直线上升.
7601性能测试：发送1M数据，大概在200ms左右.
这性能和接收端的网卡有一定的关系。

2.咨询合凯那边处理办法；给的回复是：
a.他们代码里面也是一帧一帧读取和写入SD卡；
b.他们在回放的时候就停止了SD卡的写入，这样就不会影响效率；
但是回放的时候停止写入SD卡，这种情况不行，因为如下场景：
在开车的时候有人拿手机在看回放，停止录像导致视频丢失.


20160524 周4
1.把两个程序代码合到一起；
2.帮助app那边整理一固件.


20160524 周5
1.优化代码结构。
2.app与记录仪命令网络部分代码接口调试.



2016年5月 Week 3 (20160516-20160520)
**************************************************************
20160516 周一
MP4 rec 点播的bug定位.已经可以正常播放了.

20160517 周二
MP4文件添加时间水印接口.

20160518 周三
整理阶段性功能，发布一个最初的功能版本进行测试
整理详细功能列表文档.

20160519 周4
修正录制久了一行会出现内存读取失败bug；
研究app和记录仪通信的协议的方式，暂定用post get的方式来实现app和记录仪交互；

20160520 周5
移植web服务器gohead.





2016年5月 Week 2 (20160509-20160514)
**************************************************************

20160509 周一：
RTSP MP4文件点播.
1.用mp4v2录制出来的mp4文件，获取不到sps pps.对必一下mp4文件;

20160510 周二
查找mp4v2生成的mp4文件和其它文件的区别.
解决rtsp mp4点播功能拖动bug.


MP4v2打包MP4文件的方式做了修改.ffmpeg能够正常解析我们生成的mp4文件;
按照帧率*时间的方式修正保存每个MP4文件的长度，保证180s就是180s.

20160511 周3
整合代码，直播帧率不正确Bug修改；
参照对必合凯的代码，仔细研究它的代码流程.

20160512 周4
测试发现ffmpeg拖动导致内存出现问题，宕机，把ffmpeg解析mp4文件平移到mp4v2


20160512 周5
梳理H264到mp4的代码。
整理mp4v2解析MP4 info的代码.

20160512 周6
整理相关代码平移到hisi
暂时跑步起来，估计C++ 和C交叉编译导致内部错误.


**************************************************************
2016年5月 Week 1 (20160503-20160508)
**************************************************************
20160503
工作计划：
1.按照协议获取文件的帧、时间信息；
2.可以拖动播放单个文件.主机是sdp信息填充+play消息响应.

SDP填充play的ntp参数，但是VLC会卡死，不能播放.
要研究时间戳的问题.

20160504
针对暂停，然后在响应Play播放消息，添加ntp:头部分.让VLC知道视频播放在什么位置了.
拖动以后，抓包分析，SDP信息已经正常.

20160505
拖动不能播放，因为解析SDP的接收数组没做初始化，导致内存越界解析参数错误；
通过ffmpeg拖动定位到关键帧,然后读取数据进行播放;

20160506
1.解析媒体文件的时间长度；媒体信息组成信息链表；
2.增加同时打开多个文件结构代码框架.

20160507
1.根据解析的mp4文件信息，检索对应的视频文件进行播放.
2.整理这部分代码.

拖动播放的时候，会内存访问错误.还需要排查.

**************************************************************




2016-04-05
已经解决的问题：
1.Makefile -DSENSER_TYPE传入的宏定义值不正确，导致1080P传入数据720出数据，色彩还不正常；
暂时在代码里面用宏代替了-D参数传入.
2.音频存储ACC和H264初始化话部分功能冲突，导致一些异常;

2016-04-06目标
1.H264和AAC存储功能正常；
2.MP4v2代码移植，能够实现存储mp4的功能;

总结：
已经可以录制MP4，图像能显示，但是好像视频有些异常.
声音也能显示，但是播放速度过快.

问题：
ostringstream出现野指，导致宕机.估计是连接的C++版本库有问题导致;暂时屏蔽了ostreingstream的地方。这个还需排除排除.

录制的MP4好像很卡.

2016-04-07
目标：
1.梳理代码，争取能够完成正确的MP4录制文件;
2.能够按3分钟一个视频文件录制到SD卡里面.


2016-04-08
学习live555推流源代码；
按照easypusher的方式打包一个lib出来.
---------------------------------
录制的视频码流通过共享内存的方式吧stream发送给live555的source.
live555单独作为流媒体发布的程序分离出来.

这样整过程序的框架就更简洁一些.



2016-04-09 工作
封装内存读取H264推流class.

2016-04-14工作
写共享内存相关的代码.

2016-04-15工作
1.共享内存方式传数据到live555.
  采用内存pool的方式，数据可以正常储存！

BUG：1.cdr_app的cpu占用率非常高.
     2.Cdr_app 经常段错误挂掉.


2016-04-16工作内容:
1.暂时先移植live555内存获取数据推送264视频的功能.
定位解决段错误，CPU占用很高的问题.

段错误：因为分配两快共享内存~导致异常.修改为分配一块共享内存;

视频推送基本稳了~不会异常挂掉.
但是系统的时间戳有问题.配置好的30帧但是输出文件只有25帧.

现在live555推流延时大约在3s的样子，需要进一步优化.



20160418工作：
1.整理代码，有录制MP4储存功能.
2.有Live555直播的功能.
一个完整固件，可以测试.

今天工作：
live555代码继续优化，现在延时在1-2s只有.1080P
总体算比较流程.


打包固件的功能暂时还没完成.已经把自动加载驱动Mountsd卡部分挂载好了.



20160419工作：
1.MP4代码能够分片储存.能够正常挂载SD卡.
2.研究了一下rtsp sample的代码.可以优化推流的流程;


20160419工作：
1.RTSP 推流;
SDP描述里面需要SPS PPS 的需要base64Encode.

20160420
调试RTSP server代码

20160421
调试RTSP Server代码.
暂时1080P一路推流相当稳定.
已知Bug：ffplayer播放正常.VLC rtsp交互的时候参数解析错误.

20160422工作：
计划：
1.解决VLC rtspbug文件.
2.整合一个完整的固件.

VLCbug解决.rtp over udp方式 720P 很流畅.


20160423工作：
计划：
1.整合一个完整的固件.

整合固件，
遇到的问题：
1.线程资源冲突问题，导致写入数据混乱
2.写入数据索引过长.导致越界异常.



**************************************************************8
20160425 工作计划：
1.rtc部分部分功能实现；
2.系统进程监控.最好能够输出日志.

20160426:
整理调整输出帧率bug.加入预览后，帧率变为30以内，视频播放异常.

20160427:
ffmpeg解析MP4文件.为live555做文件预览支持.

ffmpeg 解析MP4文件sample代码流程学习.测试.
暂时可以把264流拉出来，但是不知道怎么把数据在内存里面做转换.

20160428
ffmpeg 可以解析H264 用自己写的rtspserver可以播放mp4文件.
但是系统播放一会儿就会oom-killer.

这个暂时还需要debug，是rtsp server引起的还是ffmpeg申请内存太多导致.

20160429:
ffmpeg 解析mp4oom-killer问题解决.可以循环把mp4文件推送rtsp流.测试正常！