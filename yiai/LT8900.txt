1.GPIO0_1 RST

GPIO0 0x2014_0000

0x400 GPIO_DIR GPIO 方向控制寄存器
0x000～0x3FC GPIO_DATA GPIO 数据寄存器

0b10_0000_0000 Byte7 200
0b01_0000_0000 Byte6 100
0b00_1000_0000 Byte5 80
0b00_0100_0000 Byte4 40
0b00_0010_0000 Byte3 20
0b00_0001_0000 Byte2 10
0b00_0000_1000 Byte1 8
0b00_0000_0100 Byte0 4

复用寄存器.
0x074 Register Name muxctrl_reg29


RST 低电平
himm 0x200f0074  0x0
himm 0x20140400 0x02
himm 0x20140008 0x00

RST 高电平
himm 0x200f0074  0x0
himm 0x20140400 0x02
himm 0x20140008 0x02






RST 低电平
himm 0x200f0074  0x0
himm 0x20140400 0x02
himm 0x20140008 0x00

RST 高电平
himm 0x20140008 0x02




1.GPIO0_0 PKT

GPIO0 0x2014_0000

0x400 GPIO_DIR GPIO 方向控制寄存器
0x000～0x3FC GPIO_DATA GPIO 数据寄存器

0b10_0000_0000 Byte7 200
0b01_0000_0000 Byte6 100
0b00_1000_0000 Byte5 80
0b00_0100_0000 Byte4 40
0b00_0010_0000 Byte3 20
0b00_0001_0000 Byte2 10
0b00_0000_1000 Byte1 8
0b00_0000_0100 Byte0 4

复用寄存器.
0x070
Register Name
muxctrl_reg28

RST 低电平
himm 0x0200f070  0x0
himm 0x20140400 0x02


RST 高电平
himm 0x0200f070  0x0
himm 0x20140400 0x02


himd 0x201403FC






int spi_write_register(unsigned int addr, unsigned char data)
{
	int fd = -1;
	int ret;
	unsigned int value;
	struct spi_ioc_transfer mesg[1];
	unsigned char tx_buf[4];
	unsigned char rx_buf[4];
	char file_name[] = "/dev/spidev1.0";
	fd = open(file_name, 0);
	if (fd < 0) 
	{
		return -1;
	}
	memset(tx_buf, 0, sizeof tx_buf);
	memset(rx_buf, 0, sizeof rx_buf);
	tx_buf[0] = (addr & 0xff00) >> 8;
	tx_buf[0] &= (~0x80);
	tx_buf[1] = addr & 0xff;
	tx_buf[2] = data;
	memset(mesg, 0, sizeof mesg);
	mesg[0].tx_buf = (__u32)tx_buf;
	mesg[0].rx_buf = (__u32)rx_buf;
	mesg[0].len = 3;
	mesg[0].speed_hz = 2000000;
	mesg[0].bits_per_word = 8;
	mesg[0].cs_change = 1;
	value = SPI_MODE_3 | SPI_LSB_FIRST;
	ret = ioctl(fd, SPI_IOC_WR_MODE, &value);
	if (ret < 0) 
	{
		close(fd);
		return -1;
	}
	ret = ioctl(fd, SPI_IOC_MESSAGE(1), mesg);
	if (ret != mesg[0].len) 
	{
		close(fd);
		return -1;
	}
	close(fd);
	return 0;
}


int spi_read_register(unsigned int addr,unsigned char *data)
{
	intfd = -1;
	intret = 0;
	unsigned int value;
	struct spi_ioc_transfer mesg[1];
	unsigned char tx_buf[4];
	unsigned char rx_buf[4];
	char file_name[] = "/dev/spidev0.0";
	fd = open(file_name, 0);
	if (fd < 0) 
	{
		return -1;
	}
	memset(tx_buf, 0, sizeof tx_buf);
	memset(rx_buf, 0, sizeof rx_buf);
	tx_buf[0] = (addr & 0xff00) >> 8;
	tx_buf[0] |= 0x80;
	tx_buf[1] = addr & 0xff;
	tx_buf[2] = 0;
	memset(mesg, 0, sizeof mesg);
	mesg[0].tx_buf = (__u32)tx_buf;
	mesg[0].rx_buf = (__u32)rx_buf;
	mesg[0].len = 3;
	mesg[0].speed_hz = 2000000;
	mesg[0].bits_per_word = 8;
	mesg[0].cs_change = 1;
	value = SPI_MODE_3 | SPI_LSB_FIRST;
	ret = ioctl(fd, SPI_IOC_WR_MODE, &value);
	if (ret < 0) 
	{
		close(fd);
		return -1;
	}
	ret = ioctl(fd, SPI_IOC_MESSAGE(1), mesg);
	if (ret != mesg[0].len) 
	{
		close(fd);
		return -1;
	}
	*data = rx_buf[2];
	close(fd);
	return 0;
}


ssp_read 0x01 0x0 0x0 36
ssp_write 0x01 0x0 0x0 36 0x65





RST 低电平
himm 0x0200f074  0x0
himm 0x20140400 0x02
himm 0x20140008 0x00



RST 高电平
himm 0x0200f074  0x0
himm 0x20140400 0x02
himm 0x20140008 0x02




表2-27 复用寄存器概览（复用寄存器基地址为 0x200F_0000）

0x050 muxctrl_reg20 SPI1_SCLK 管脚的复用控制寄存器 2-54
0x054 muxctrl_reg21 SPI1_SDO 管脚的复用控制寄存器 2-55
0x058 muxctrl_reg22 SPI1_SDI 管脚的复用控制寄存器 2-55
0x05C muxctrl_reg23 SPI1_CSN0 管脚的复用控制寄存器
0x030 muxctrl_reg12 SPI1_CSN1 管脚的复用控制寄存器 2-54


himm 0x200f0050  0x01
himm 0x200f0054  0x01
himm 0x200f0058  0x01
himm 0x200f005C  0x01
himm 0x200f0030  0x01



himm 0x20060000 0x04



GPIO3_7  SPI1_SCLK

RST 低电平 SPI1_SCLK
himm 0x0200f050 0x0
himm 0x20170400 0x80
himm 0x20170200 0x00

himm 0x20170200 0x80


0x054 muxctrl_reg21 SPI1_SDO GPIO4_0 管脚的复用控制寄存器 2-55
himm 0x0200f054 0x0
himm 0x20180400 0x01

himm 0x20180004 0x00
himm 0x20180004 0x01


0x058 muxctrl_reg22 SPI1_SDI GPIO4_1管脚的复用控制寄存器 2-55
himm 0x0200f058 0x0
himm 0x20180400 0x02

himm 0x20180008 0x00
himm 0x20180008 0x02


/******************测试OK**************/
GPIO4_2  SPI1_CSN0

himm 0x0200f05C 0x0
himm 0x20180400 0x04

//低电平
himm 0x20180010 0x00

//高电平
himm 0x20180010 0x04
/*************************************/



/******************测试OK**************/
GPIO7_7

himm 0x0200f0FC 0x01
himm 0x201B0400 0x80

//低电平
himm 0x201B0200 0x00

//高电平
himm 0x201B0200 0x80
/*************************************/


/******************测试OK**************/
GPIO4_6  
//低电平
himm 0x200f006C 0x00
himm 0x20180400 0x40
himm 0x20180100 0x00
//高电平
himm 0x201803FC 0xFF

