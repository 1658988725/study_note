1.系统开机录制时间优化：2 周时间.

A.boot 2天
  1.boot阶段检测usb部分需要去掉，只留下sd卡检测即可，我们不支持USB升级；
  2.boot阶段加载bootargs 需要做好操作；避免crc校验错误.浪费500ms
  3.boot sleep 1秒可以去掉;
B.rootfs.暂无  
C.system 
  4.S90脚本 1天
   开机把外设：Wifi电源.可以复位的IO口都复位；
  5.加载mpp 驱动.
   mpp驱动脚本需要优化，没用的的ko都不需要加载；没必要的rmmod流程也去掉.
  
  Webserver + wifi 在cdr_app 启动后10秒才在程序内部开启；

APP需要优化的：
 
  1.mpp层需要封装为lib的方式.比较标准的接口. 3天
  2.和app通信相关的都封装为一个lib.
  3.rtsp 封装为单独的lib. 3天
  4.sd卡管理区，包括mp4创建，sd卡目录创建都封装为lib. 2天
  5.外设.主要需要梳理IO口相关的问题，防止各个IO口之间冲突，导致外设异常.
  6.rtsp 推流到服务器部分需要单独优化.


app内部逻辑功能启动流程：


0.初始化外设相关的.
1.rec录像.同时要启动拔电检测这个外设.
2.wifi.外设启动.
3.rec解析mp4线程启动.
4.webserver.&rtsp server.
5.和app通信的服务启动.
6.app discover 相关服务最后启动.


内存优化：
  内存需要优化的项目，主要为某些地方内存太多浪费太多.


系统代码巡视buglist

1.设置模式后.前后会不对应. 720P 480P 创建mp4的时候没有对应的修改参数.导致生成mp4异常.

2.rec流和截取视频用的同一个链表. 1.没有做数据保护，2.共用的时候没有做逻辑互斥.这样会导致获取一帧数据的时候显示异常.或者宕机.

3.live rec流对应的rtspserver 共用了相同的sps pps 导致sdp 数据没有正常生成，或者指定了错误的参数.这个需要翻转接口的地方吧sps pps指定进去.

4.rtsp server单路session的发送数据方式，可能导致异常.不同的流建立不同的session.比较合理.

5.系统性能优化
http://www.easydarwin.org/article/EasyDarwin/91.html
gettimeofday 函数大量使用都会有cpu的消耗.可以做进一步数据封装.

6.GPIO复用的问题.有些使用的cdr_system函数直接操作了对应的寄存器.导致会改变一组GPIO属性修改.导致一些关联外设之间相互影响.

7.外设8900 里面代码使用while（1）的方案，导致系统运行逻辑异常，卡壳了.代码无法往下执行.

8.代码里面list用的比较多.到时候整合使用一个thread safe的 queue.不然有些list可能会出现内存错误或者异常.而且问题不好查找.

9.局部变量未初始化，还有一些循环调用函数内部局部变量作为参数传送.可能栈满.导致与实际进入的数据不同步问题.

10.截取视频+rec回放的时候.数据异常.

11.readdir 返回的文件名没有排序.xml里面有些异常.readdir 是按照存储的page布局来获取文件名的.

12.只会在开机的时候同步索引图片目录和视频，录制过程中如果有视频文件覆盖，就不会同步删除对应的索引图片.这样给app判断就会有些异常.

13.系统拔电后，还能拍照提示音.



2016-11-07以后生产版本：
1.和出货版本一样.
2.串口里面输出SSID.
3.通过网络获取系统硬件配置的初始化文件.


